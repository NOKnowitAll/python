# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""




ipaddr = input("Input IP adreess 10.1.1.0/24: ")
ipaddr = ipaddr.replace('.', ' ').replace('/', ' ').split()

ip2 = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(ipaddr[0]), int(ipaddr[1]), int(ipaddr[2]), int(ipaddr[3]))
print(ip2)
ipnet = ip2[0:int(ipaddr[4])] + "0"*(32-int(ipaddr[4]))
print(ipnet)
k1, k2, k3, k4 = [
int(ipnet[0:8], 2),
int(ipnet[8:16], 2),
int(ipnet[16:24], 2),
int(ipnet[24:32], 2)
]
maska = "1"* int(ipaddr[4]) + "0"*(32-int(ipaddr[4]))

m1, m2, m3, m4 = [
int(maska[0:8], 2),
int(maska[8:16], 2),
int(maska[16:24], 2),
int(maska[24:32], 2)
]

network = """
Network:
{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}
"""
mask = """
Mask:
/{0:}
{1:<10}{2:<10}{3:<10}{4:<10}
{1:08b}  {2:08b}  {3:08b}  {4:08b}
"""
print(network.format(k1, k2, k3, k4))
print(mask.format(int(ipaddr[4]), m1, m2, m3, m4))


